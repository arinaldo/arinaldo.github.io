my.dist[1:2]
my.dist[[1:2]]
set.seed(6433635)
huge.bin.draws <- rbinom(200e6, 10e6, 50e-8)
system.time(mean(huge.bin.draws))
system.time(median(huge.bin.draws))
system.time(sum(huge.bin.draws)/length(huge.bin.draws))
set.seed(33) # For reproducibility
x.vec = rnorm(6)
x.vec
x.vec[0]
x.vec
x.mat = matrix(x.vec, 3, 2)
x.mat
x.mat[5]
x.list = list(x.vec, letters, sample(c(TRUE,FALSE),size=4,replace=TRUE))
x.list
x.list[[3]]
x.list[3]
str(x.list[3])
str(x.list[[3]])
x.list[1:2]
x.list[-1]
x.list[-1]
x.list
x.list[-1]
x.list[[-1]]
x.vec
pos.vec = x.vec > 0
pos.vec
x.vec[pos.vec]
x.vec[x.vec > 0]
which(x.vec > 0)
x.list
names(x.list) = c("normals", "letters", "bools")
x.list
x.list[c("normals","bools")]
x.list[c(1,3)]
x.list["normals"]
class(x.list["normals"])
class(x.list[["normals"]])
x
x = -2
ifelse(x > 0, x, -x)
xx = c(2,-4,7,-1,-5)
xx
ifelse(xx > 0, xx, -xx)
abs(xx)
u.vec = runif(10, -1, 1)
u.vec
u.vec[-0.5 <= u.vec & u.vec <= 0.5]
n = 10
log.vec = vector(length=n, mode="numeric")
for (i in 1:n) {
log.vec[i] = log(i)
}
log.vec
log(1:10)
for (str in c("Prof", "Ale", "Rinaldo")) {
cat(paste(str, "declined to comment\n"))
}
my.df = data.frame(nums=seq(0.1,0.6,by=0.1), chars=letters[1:6],
bools=sample(c(TRUE,FALSE), 6, replace=TRUE))
my.df
df
my.df
my.df$chars
my.char = "chars"
my.df$my.c hars
my.df$my.chars
my.df[[my.chars]]
my.df[,my.chars]
my.df[,my.char]
my.df[[my.char]]
?quantile
x = matrix(rnorm(9), 3, 3)
x>0
my.df = data.frame(nums=seq(0.1,0.6,by=0.1), chars=letters[1:6],
bools=sample(c(TRUE,FALSE), 6, replace=TRUE))
my.df
# Recall, a list can have different lengths for different elements!
my.list = list(nums=seq(0.1,0.6,by=0.1), chars=letters[1:12],
bools=sample(c(TRUE,FALSE), 6, replace=TRUE))
my.list
my.df[,1] # Also works for a matrix
my.df[,"nums"] # Also works for a matrix
my.df$nums # Doesn't work for a matrix, but works for a list
my.df$chars # Ditto
class(state.x77) # Built-in matrix of states data, 50 states x 8 variables. Type ?state for details
head(state.x77)
class(state.region) # Factor of regions for the 50 states
head(state.region)
class(state.division) # Factor of divisions for the 50 states
head(state.division)
# Combine these into a data frame with 50 rows and 10 columns
state.df = data.frame(state.x77, Region=state.region, Division=state.division)
class(state.df)
head(state.df) # Note that the first 8 columns name carried over from state.x77
# First way: use data.frame() to concatenate on a new column
state.df = data.frame(state.df, Cool=sample(c(T,F), nrow(state.df), rep=TRUE))
head(state.df, 4)
# Second way: just directly define a new named column
state.df$Score = sample(1:100, nrow(state.df), replace=TRUE)
head(state.df, 4)
# First way: use negative integer indexing
state.df = state.df[,-ncol(state.df)]
head(state.df, 4)
# Second way: just directly set a column to NULL
state.df$Cool = NULL
head(state.df, 4)
# Compare the averages of the Frost column between states in New England and
# Pacific divisions
mean(state.df[state.df$Division == "New England", "Frost"])
mean(state.df[state.df$Division == "Pacific", "Frost"]) # Those wimps!
# Using subset(), we can just use the column names directly (i.e., no need for
# using $)
state.df.ne.1 = subset(state.df, Division == "New England")
# Get same thing by extracting the appropriate rows manually
state.df.ne.2 = state.df[state.df$Division == "New England", ]
all(state.df.ne.1 == state.df.ne.2)
# Same calculation as in the last slide, using subset()
mean(subset(state.df, Division == "New England")$Frost)
mean(subset(state.df, Division == "Pacific")$Frost) # Wimps
apply(state.x77, MARGIN=2, FUN=min) # Minimum entry in each column
apply(state.x77, MARGIN=2, FUN=max) # Maximum entry in each column
apply(state.x77, MARGIN=2, FUN=which.max) # Index of the max in each column
apply(state.x77, MARGIN=2, FUN=summary) # Summary of each col, get back matrix!
# Our custom function: trimmed mean
trimmed.mean = function(v) {
q1 = quantile(v, prob=0.1)
q2 = quantile(v, prob=0.9)
return(mean(v[q1 <= v & v <= q2]))
}
apply(state.x77, MARGIN=2, FUN=trimmed.mean)
# Compute trimmed means, defining this on-the-fly
apply(state.x77, MARGIN=2, FUN=function(v) {
q1 = quantile(v, prob=0.1)
q2 = quantile(v, prob=0.9)
return(mean(v[q1 <= v & v <= q2]))
})
# Our custom function: trimmed mean, with user-specified percentiles
trimmed.mean = function(v, p1, p2) {
q1 = quantile(v, prob=p1)
q2 = quantile(v, prob=p2)
return(mean(v[q1 <= v & v <= q2]))
}
apply(state.x77, MARGIN=2, FUN=trimmed.mean, p1=0.01, p2=0.99)
x = matrix(rnorm(9), 3, 3)
# Don't do this (much slower for big matrices)
apply(x, MARGIN=1, function(v) { return(sum(v > 0)) })
# Do this insted (much faster, simpler)
rowSums(x > 0)
my.list
lapply(my.list, FUN=mean) # Get a warning: mean() can't be applied to chars
lapply(my.list, FUN=summary)
sapply(my.list, FUN=mean) # Simplifies the result, now a vector
sapply(my.list, FUN=summary) # Can't simplify, so still a list
names(state.x77)
state.x77
colnames(state.x77)
rownames(state.x77)
colnames(state.x77)
state.x77$Frost
state.x77
class(state.x77)
is.data.frame(state.x77)
my.df = data.frame(nums=seq(0.1,0.6,by=0.1), chars=letters[1:6],
bools=sample(c(TRUE,FALSE), 6, replace=TRUE))
my.df
# Recall, a list can have different lengths for different elements!
my.list = list(nums=seq(0.1,0.6,by=0.1), chars=letters[1:12],
bools=sample(c(TRUE,FALSE), 6, replace=TRUE))
my.list
my.df[,1] # Also works for a matrix
my.df[,"nums"] # Also works for a matrix
my.df$nums # Doesn't work for a matrix, but works for a list
my.df$chars # Ditto
class(state.x77) # Built-in matrix of states data, 50 states x 8 variables. Type ?state for details
head(state.x77)
class(state.region) # Factor of regions for the 50 states
head(state.region)
class(state.division) # Factor of divisions for the 50 states
head(state.division)
state.x77
?head
?sapply
pros.dat =
read.table("http://www.stat.cmu.edu/~arinaldo/Teaching/36350/F22/data/pros.dat")
head(pros.dat,4)
apply(pros.dat,mean)
?apply
apply(pros.dat,2,mean)
sapply(pros.dat,mean)
?lapply
lapply(pros.dat[, colnames(pros.dat)!="svi"], plot, x=pros.dat$svi)
lapply(pros.dat[, colnames(pros.dat)!="svi"], plot, x=pros.dat$svi)
?mapply
pros.dat[,-"svi"]
pros.dat[,"svi"]
pros.dat[["svi"]]
pros.dat$svi
pros.dat[,-c("svi")]
mapply(plot, y=pros.dat[, colnames(pros.dat)!="svi"],
ylab=colnames(pros.dat)[colnames(pros.dat)!="svi"],
MoreArgs=list(x=pros.dat$svi, xlab="svi"))
lapply(pros.dat[, colnames(pros.dat)!="svi"], plot, x=pros.dat$svi,ylab=colnames(pros.dat)[colnames(pros.dat)!="svi"])
?mapply
stopifnot
?stopifnot
?t.test
t.test.by.ind = function(x, ind) { stopifnot(all(ind %in% c(0, 1))) return(t.test(x[ind == 0], x[ind == 1]))
t.test.by.ind = function(x, ind) {
stopifnot(all(ind %in% c(0, 1)))
return(t.test(x[ind == 0], x[ind == 1]))
}
tests = lapply(pros.dat[, colnames(pros.dat)!="svi"],
t.test.by.ind, ind=pros.dat$svi)
class(test)
class(tests)
tests[[1]]
class(tests[[1]])
class(tests[1])
class(tests[[1]])
names(tests[[1]])
tests[[1]]$p.value
?lapply
`[[`(pros.dat, "lcavol")
pros.dat$lcavol
pros.dat[["lcavol"]]
'[['(pros.dat,"lcavol")
class(tests[[1]])
typeof(tests[[1]])
mode(tests[[1]])
?range
?unlist
l.ex <- list(a = list(1:5, LETTERS[1:5]), b = "Z", c = NA)
l.ex
unlist(l1)
unlist(ll)
ll
unlist(l.ex)
l.ex
unlist(l.ex, recursive = FALSE)
unlist(l.ex)
unlist(l.ex, recursive = TRUE)
l1 <- list(a = "a", b = 2, c = pi+2i)
unlist(l1) # a character vector
l1
rio = read.csv("http://www.stat.cmu.edu/~arinaldo/Teaching/36350/F22/data/rio.csv")
names(rio)
rio$sport
sports = data.frame(sport = sort(unique(rio$sport)))
sports
sports$n_participants = table(rio$sport)
sports
sports$n_gold = tapply(rio$gold, rio$sport, sum)
sports
library(plyr)
?ddply
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
)
dfx
ddply(dfx, .(group, sex), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
ddply(dfx, .(group, sex),
mean = round(mean(age), 2),
sd = round(sd(age), 2))
?summarize
summarise(baseball,
duration = max(year) - min(year),
nteams = length(unique(team)))
baseball
?state.x77
state.region
state.division
class(state.df)
state.df = data.frame(state.x77, Region=state.region, Division=state.division)
class(state.df)
names(state.df)
state.df$Area
state.df[,"Area"]
state.df[["Area"]]
my.char
my.char = "Area"
state.df$Area
state.df$my.char
state.df[,my.char]
state.df[[my.char]]
names(state.x77)
head(state.x77)
names(state.df)
state.region
?split
state.by.reg = split(data.frame(state.x77), f=state.region)
state.by.reg
my.df = data.frame(nums=seq(0.1,0.6,by=0.1), chars=letters[1:6],
bools=sample(c(TRUE,FALSE), 6, replace=TRUE))
my.df
# Recall, a list can have different lengths for different elements!
my.list = list(nums=seq(0.1,0.6,by=0.1), chars=letters[1:12],
bools=sample(c(TRUE,FALSE), 6, replace=TRUE))
my.list
my.df[,1] # Also works for a matrix
my.df[,"nums"] # Also works for a matrix
my.df$nums # Doesn't work for a matrix, but works for a list
my.df$chars # Ditto
my.df[,"nums"]
my.df$nums
my.variabele = "nums"
names(my.df)
my.df$my.variable
my.df[,my.variable]
my.variabele
my.df[,my.variabele]
my.df[[my.variabele]]
my.variabele = "chars"
my.df[[my.variabele]]
state.region
state.df = data.frame(state.x77, Region=state.region, Division=state.division)
class(state.df)
names(state.df)
?state.x77
state.region
my.variable="char"
names(my.df)
my.df
my.df$chars
my.df$my.variable
my.df[,my.variable]
my.variable
my.df[,my.variable]
my.df[[my.variable]]
is.data.frame(my.df)
muy.df
my.df
my.variable = "chars"
my.df[,my.variable]
my.df[[my.variable]]
king.lines =
readLines("https://www.stat.cmu.edu/~arinaldo/Teaching/36350/F22/data/king.txt")
king.words = strsplit(paste(king.lines, collapse=" "),
split="[[:space:]]|[[:punct:]]")[[1]]
king.words = tolower(king.words[king.words != ""])
king.words
king.wlens = nchar(king.words)
king.wlens
hist(king.wlens, col="pink", freq=TRUE)
hist(king.wlens)
hist(king.wlens,freq=TRUE)
hist(king.wlens)
?hist
hist(king.wlens,probability = freq)
hist(king.wlens,freq=FALSE)
hist(king.wlens,freq=TRUE)
hist(king.wlens,freq=FALSE)
x
x = c(1,2,3,4,5,1000)
x
curve(x^3)
sprint.m.times = as.numeric(substr(sprint.m.df$Time, 1, 4))
sprint.m.df = read.table(
file="https://www.stat.cmu.edu/~arinaldo/Teaching/36350/F22/data/sprint.m.txt",
sep="\t", quote="", header=TRUE)
sprint.w.df = read.table(
file="https://www.stat.cmu.edu/~arinaldo/Teaching/36350/F22/data/sprint.w.txt",
sep="\t", quote="", header=TRUE)
sprint.m.times = as.numeric(substr(sprint.m.df$Time, 1, 4))
sprint.m.years = as.numeric(substr(sprint.m.df$Date, nchar(sprint.m.df$Date)-3,
nchar(sprint.m.df$Date)))
sprint.m.times[1:10]
sprint.m.years[1:10]
names(sprint.m.df)
sprint.m.df$Birthdate[1]
# Get King's word counts
king.lines = readLines("https://www.stat.cmu.edu/~arinaldo/Teaching/36350/F22/data/king.txt")
king.lines[1:10]
king.text = paste(king.lines, collapse=" ")
king.text
king.words = strsplit(king.text, split="[[:space:]]|[[:punct:]]")[[1]]
king.words
king.words = king.words[king.words != ""]
king.wordtab = table(king.words)
king.words
king.wordtab
# get.wordtab.king: get a word table from King's "I Have A Dream" speech
# Input: none
# Output: word table, i.e., vector with counts as entries and associated
#   words as names
get.wordtab.king = function() {
lines = readLines("https://www.stat.cmu.edu/~arinaldo/Teaching/36350/F22/data/king.txt")
text = paste(lines, collapse=" ")
words = strsplit(text, split="[[:space:]]|[[:punct:]]")[[1]]
words = words[words != ""]
wordtab = table(words)
return(wordtab)
}
# get.wordtab.from.url: get a word table from text on the web
# Input:
# - str.url: string, specifying URL of a web page
# Output: word table, i.e., vector with counts as entries and associated
#   words as names
get.wordtab.from.url = function(str.url) {
lines = readLines(str.url)
text = paste(lines, collapse=" ")
words = strsplit(text, split="[[:space:]]|[[:punct:]]")[[1]]
words = words[words != ""]
wordtab = table(words)
return(wordtab)
}
# Using our function
king.wordtab.new = get.wordtab.from.url(
"https://www.stat.cmu.edu/~arinaldo/Teaching/36350/F22/data/king.txt")
all(king.wordtab.new == king.wordtab)
# Revealing our function's definition
get.wordtab.from.url
all.equal(king.wordtab,king.wordtab.new)
names(king.wordtab)
length(names(king.wordtab))
length(names(king.wordtab.new))
sum(king.wordtab.new = king.wordtab)
length(king.wordtab.new)
sum(king.wordtab.new == king.wordtab)
all(king.wordtab.new == king.wordtab)
table(words)
get.wordtab.from.url = function(str.url, split) {
lines = readLines(str.url)
text = paste(lines, collapse=" ")
words = strsplit(text, split=split)[[1]]
words = words[words != ""]
table(words)
}
get.wordtab.from.url = function(str.url, split="[[:space:]]|[[:punct:]]",
tolower=TRUE) {
lines = readLines(str.url)
text = paste(lines, collapse=" ")
words = strsplit(text, split=split)[[1]]
words = words[words != ""]
# Convert to lower case, if we're asked to
if (tolower) words = tolower(words)
table(words)
}
# Inputs can be called by name, or without names
king.wordtab1 = get.wordtab.from.url(
str.url="https://www.stat.cmu.edu/~arinaldo/Teaching/36350/F22/data/king.txt",
split="[[:space:]]|[[:punct:]]", tolower=TRUE)
king.wordtab2 = get.wordtab.from.url(
"https://www.stat.cmu.edu/~arinaldo/Teaching/36350/F22/data/king.txt",
"[[:space:]]|[[:punct:]]", TRUE)
all(king.wordtab2 == king.wordtab1)
# Inputs can be called by partial names (if uniquely identifying)
king.wordtab3 = get.wordtab.from.url(
str="https://www.stat.cmu.edu/~arinaldo/Teaching/36350/F22/data/king.txt",
spl="[[:space:]]|[[:punct:]]", tolower=TRUE)
all(king.wordtab3 == king.wordtab1)
# When inputs aren't specified, default values are used
king.wordtab4 = get.wordtab.from.url(
str.url="https://www.stat.cmu.edu/~arinaldo/Teaching/36350/F22/data/king.txt",
split="[[:space:]]|[[:punct:]]")
all(king.wordtab4 == king.wordtab1)
# Named inputs can go in any order
king.wordtab5 = get.wordtab.from.url(
tolower=TRUE, split="[[:space:]]|[[:punct:]]",
str.url="https://www.stat.cmu.edu/~arinaldo/Teaching/36350/F22/data/king.txt")
all(king.wordtab5 == king.wordtab1)
get.wordtab.from.url
king.wordtab6 = get.wordtab.from.url("[[:space:]]|[[:punct:]]",
"https://www.stat.cmu.edu/~arinaldo/Teaching/36350/F22/data/king.txt",
tolower=FALSE)
# get.wordtab.from.url: get a word table from text on the web
# Inputs:
# - str.url: string, specifying URL of a web page
# - split: string, specifying what to split on. Default is the regex pattern
#   "[[:space:]]|[[:punct:]]"
# - tolower: Boolean, TRUE if words should be converted to lower case before
#   the word table is computed. Default is TRUE
# - keep.nums: Boolean, TRUE if words containing numbers should be kept in the
#   word table. Default is FALSE
# Output: list, containing word table, and then some basic numeric summaries
get.wordtab.from.url = function(str.url, split="[[:space:]]|[[:punct:]]",
tolower=TRUE, keep.nums=FALSE) {
lines = readLines(str.url)
text = paste(lines, collapse=" ")
words = strsplit(text, split=split)[[1]]
words = words[words != ""]
# Convert to lower case, if we're asked to
if (tolower) words = tolower(words)
# Get rid of words with numbers, if we're asked to
if (!keep.nums)
words = grep("[0-9]", words, inv=TRUE, val=TRUE)
# Compute the word table
wordtab = table(words)
return(list(wordtab=wordtab,
number.unique.words=length(wordtab),
number.total.words=sum(wordtab),
longest.word=words[which.max(nchar(words))]))
}
# King's "I Have A Dream" speech
king.wordtab = get.wordtab.from.url(
"https://www.stat.cmu.edu/~arinaldo/Teaching/36350/F22/data/king.txt")
lapply(king.wordtab, head)
# Lincoln's Gettysburg address
lincoln.wordtab = get.wordtab.from.url(
"https://www.stat.cmu.edu/~arinaldo/Teaching/36350/F22/data/lincoln.txt")
lapply(lincoln.wordtab, head)
pi
-2:2
seq(-2,2,length(=100))
seq(-2,2,length=100)
